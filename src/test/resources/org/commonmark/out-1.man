.SH
Build Prozess
.PP
Voraussetzungen:
.IP \[bu] 2
Entwicklungsumgebung ist Windows
.IP \[bu] 2
Eclipse Version "Luna" mit SVN Plugin
.IP \[bu] 2
java 8 von Oracle muss installiert sein
.IP \[bu] 2
Zugang zum comron SVN repository muss gehen
.SS
Kern auf Windows builden
.PP
Eclipse starten.
.PP
Projekt mcom\-common aus SVN auschecken: /mcom/mcom\-common/trunk.
In Eclipse mcom\-common builden, build.xml Target "rebuild\-all".
Das erzeugt einen build/ Ordner. In build/dist/ liegen nun ein paar
jar Files.
.PP
Projekt mcom\-core aus SVN auschecken: /mcom/mcom\-core/trunk.
In Eclipse mcom\-core builden, build.xml Target "rebuild\-all".
Das "rebuild\-all" Target kopiert alle mcom\-common jar Files
ins mcom\-core Projekt. Build\-Ergebnisse liegen nun in mcom\-core/build/.
.PP
In C:\eTemp folgende Ordner Struktur anlegen:
.IP
.nf
\f[C]
C:\eTemp
    └── mcom
        ├── core
        │   └── data
        ├── modules
        └── system
\f[]
.fi
.SS
Kern auf Windows starten
.PP
Der Kern kann nun gestartet werden, main\-Klasse ist de.comron.mcom.core.CoreMain
Das erste Starten schlägt fehl weil dem Kern nicht mitgeteilt wurde wo
seine Home\- und Datenordner usw. sind. Das muß über CLI\-Parameter erfolgen.
Dazu in Eclipse Debug Configuration "CoreMain" bearbeiten:
CoreMain braucht folgende Arguments:
.IP
.nf
\f[C]
\-home    C:/eclipse\-workspaces/luna/comron/mcom\-core/home
\-data    C:/Temp/mcom/core/data
\-modules C:/Temp/mcom/modules
\-system  C:/Temp/mcom/system
\-allowEmptyLogin true
\f[]
.fi
.PP
Die einzelnen Parameter sind in der CoreMain.java, Method "printUsage()"
beschrieben.  Das "\-home" muss wahrscheinlich an die eigene Eclipse\-Installation
angepasst werden.
.PP
Kern sollte jetzt startbar sein und in C:\eTemp\emcom\ecore\edata eine
leere sqlite3 Datenbank "db" eine core.log und eine log4j.properties
Datei anlegen.
Die log4j.properties ist vom Kern selbst generiert und loggt per default
nur in core.log. Zum Entwickeln kann die Datei editiert werden und der
console Appender enabled und logLevel auf DEBUG gesetzt werden.
Die Datenbank kann man mit sqlite3 (http://www.sqlite.org/download.html),
Abschnitt "Precompiled Binaries for Windows" anschauen und ändern.
Oder mit jedem JDBC\-fähigen DB\-Tool.
.PP
So, der Kern läuft. Nun auf http://localhost gehen und "mcom Login" drücken.
In der Login\-Box alles leer lassen und "Login" drücken. Man sollte dann als
Superuser eingeloggt sein. Das geht weil "\-allowEmptyLogin" auf
true steht. Produktiv unbedingt "\-allowEmptyLogin" weglassen!!
.PP
Das Starten des Kerns über die Kommandozeile ist auch möglich, mit folgendem Aufruf:
.IP
.nf
\f[C]
#> java \-cp "C:\eeclipse\-workspaces\eluna\ecomron\emcom\-core\ehome\elib\e*;C:/eclipse\-workspaces/luna/comron/mcom\-core/bin" 
        de.comron.mcom.core.CoreMain
        \-home C:\eeclipse\-workspaces\eluna\ecomron\emcom\-core\ehome
        \-data C:\eTemp\emcom\ecore\edata
        \-modules C:\eTemp\emcom\emodules
        \-system C:\eTemp\emcom\esystem
        \-allowEmptyLogin true
\f[]
.fi
.PP
oder direkt aus dem Projektverzeichnis:
.IP
.nf
\f[C]
#> cd C:\eeclipse\-workspaces\eluna\ecomron\emcom\-core
#> java \-cp "home\elib\e*;bin" 
        de.comron.mcom.core.CoreMain
        \-home .
        \-data C:\eTemp\emcom\ecore\edata
        \-modules C:\eTemp\emcom\emodules
        \-system C:\eTemp\emcom\esystem
        \-allowEmptyLogin true
\f[]
.fi
.PP
Prinzipiell kann der Kern von jedem Verzeichnis aus aufgerufen werden, intern
verwendet der Kern nur feste Pfade. Empfohlen ist aber der Aufruf direkt
aus dem home/ Folder. (Vielleicht gibt's ja doch mal einen Segfault in der
JVM, dann finden wir die Diagnosefiles leichter.)
.SS
Modul auf Windows builden und ausführen
.PP
Am Beispiel von mod\-stress. Dazu mcom/mcom\-modframe und mcom/mcom\-mod\-stress
als zwei eigene Eclipse\-Projekte aus SVN auschecken.
Das Projekt modframe ist ein Framework für mcom Module. Dieses zuerst builden,
build\-xml Target "rebuild\-all". Dann das Projekt mcom\-mod\-stress builden,
auch mit "rebuild\-all". Das ergibt im mcom\-mod\-stress/build/dist ein ZIP file
das das Modul "Stress" enthält. Dieses kann im Kern über die Web\-Oberfläche
als Modul installiert, konfiguriert und gestartet werden.
.SS
Projektstruktur
.PP
mcom besteht aus folgenden Eclipse Projekten:
.IP \[bu] 2
mcom\-common
Bibliothek die vom Kern und von den Modulen benutzen wird.
Enthält Klasen um Telegramme zu senden/empfangen und
manifest.json und settings.properties Dateien zu lesen/parsen/schreiben.
.IP \[bu] 2
mcom\-core.PD 0
.P
.PD
Der Kern
.IP \[bu] 2
mcom\-modframe
Enthält einen Rahmen der für die Modulentwicklung benutzt werden kann
.IP \[bu] 2
mcom\-mod\-*
Jedes mcom\-mod\- Projekt enthält ein Modul, wobei  der eindeutige
Modulname ist, z.B. mcom\-mod\-mail, mcom\-mod\-aastra\-omm, mcom\-mod\-foobar, usw.
.PP
Unter den Projekten gibt's Abhängigkeiten, und zwar die folgenden:
.IP
.nf
\f[C]
      +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+     +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
      | mcom\-mod\-mail | ... | mcom\-mod\-zero |
      +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+     +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
              |                |
              +\-\-\-\-\-+      +\-\-\-+
                    |      |
                    |      |
                    V      V
+\-\-\-\-\-\-\-\-\-\-\-+   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
| mcom\-core |   | mcom\-modframe |
+\-\-\-\-\-\-\-\-\-\-\-+   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
      |                |
      |                |
      |                |
      V                V
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
|          mcom\-common         |
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\f[]
.fi
.PP
Wenn also zB an mcom\-modframe was geändert wird müssen diese Änderungen in alle
Projekte übernommen werden die davon betroffen sind. Dafür gibt's in jedem Projekt
ein build.xml mit einem "update\-*" Target. Dieses holt den aktuellen Stand des
benötigten Projekts in den eigenen Verzeichnisbaum. (Wobei aber zu beachten ist dass
das benötigte Projekt selbst erstmal gebuildet werden muss.)
Alle Projekte gehen in das eigene build/ Verzeichnis, das erstellt wird sollte es
noch nicht existieren.
.PP
Um alle mcom Projekte zu builden muß man also folgende Schritte ausführen:
.IP "1." 4
mcom\-common "rebuild\-all"
.IP "2." 4
mcom\-core "rebuild\-all"
.IP "3." 4
mcom\-modframe "rebuild\-all"
.IP "4." 4
mcom\-mod\-zero "rebuild\-all"
(Schritt 4 für alle mcom\-mod\-* Projekte wiederholen)
.PP
Die Build\-Ergebnisse finden sich dann im Ordner build/dist/ wieder.
